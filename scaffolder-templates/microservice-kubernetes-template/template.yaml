apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: microservice-kubernetes-template
  title: Microservice on Kubernetes
  description: |
    A template for creating a new Microservice on Kubernetes.
    This template will create following components:
    - Kubernetes cluster on the approved cloud provider
    - GitHub repository for the microservice
    - GitHub actions to build the microservice
    - Kubernetes manifest via kustomize to deploy the microservice
  tags:
  - pulumi
  - microservice
  - kubernetes
  - github
  - kustomize
spec:
  owner: group:infrastructure
  type: service
  parameters:
  - title: Provide project information
    required:
    - name
    - owner
    properties:
      name:
        title: Name
        type: string
        description: Unique name of the component.
        ui:field: EntityNamePicker
      description:
        title: Description
        type: string
        description: Tell us more about this component.
      system:
        title: System
        type: string
        description: System this component belongs to.
        ui:field: EntityPicker
        ui:options:
          catalogFilter:
          - kind: System
      owner:
        title: Owner
        type: string
        description: Owner of the component
        ui:field: OwnerPicker
        ui:options:
          catalogFilter:
          - kind: Group
  - title: Configure Infrastructure
    required:
    - stack
    - resource
    - organization
    properties:
      organization:
        title: Organization
        type: string
        description: The Pulumi organization to use for the Pulumi project
      resource:
        title: Kubernetes Cluster
        type: string
        ui:field: EntityPicker
        ui:options:
          catalogFilter:
          - kind: Resource
            spec.type: kubernetes
      stack:
        title: Select stack
        type: string
        enum:
        - dev
        - staging
        - prod
        enumNames:
        - Development
        - Staging
        - Production
        description: The pulumi stack to use
      scanner:
        title: Select scanner
        type: string
        enum:
        - trivy
        enumNames:
        - Trivy
        description: The scanner to use
  - title: Choose a location
    required:
    - repoUrl
    properties:
      repoUrl:
        title: Repository Location
        type: string
        ui:field: RepoUrlPicker
        ui:options:
          allowedHosts:
          - github.com
  steps:
  - id: fetchSystem
    name: Fetch System
    action: catalog:fetch
    input:
      entityRef: ${{ parameters.resource }}

  - id: fetch-flux
    name: Render Flux template
    action: fetch:template
    input:
      url: ./template-flux
      values:
        name: ${{parameters.name}}
        repoUrl: "https://github.com/${{ (parameters.repoUrl | parseRepoUrl)['owner'] }}/${{ (parameters.repoUrl | parseRepoUrl)['repo'] }}"
        description: ${{parameters.description}}
        owner: ${{parameters.owner}}

  - id: create-flux-pr
    name: Create PR to the Flux repository
    action: publish:github:pull-request
    input:
      repoUrl: github.com?repo=pulumi-gitops-repo&owner=my-backstage-demo
      title: "Create new project: ${{parameters.name}}"
      branchName: create-${{parameters.name}}
      description: |
        # Create new project: ${{parameters.name}}

        delivered by Flux
        created by Backstage Scaffolder
      targetPath: .

  - id: remove-flux-template
    name: Delete Flux template
    action: fs:delete
    input:
      files:
      - flux/apps/${{parameters.name}}-application.yaml


  - id: template
    name: Create Project
    action: fetch:template
    input:
      url: ./template-app
      values:
        name: "${{ parameters.name }}-service"
        description: ${{ parameters.description }}
        destination: ${{ parameters.repoUrl | parseRepoUrl }}
        organization: ${{ parameters.organization }}
        stack: ${{ parameters.stack }}
        owner: ${{ parameters.owner }}
        dependsOn: ${{ parameters.resource }}
        scanner: ${{ parameters.scanner }}

  - id: publish
    name: Publish to GitHub
    action: publish:github
    input:
      allowedHosts: ["github.com"]
      repoVisibility: public
      description: "This is ${{ parameters.name }}"
      repoUrl: ${{ parameters.repoUrl }}
      defaultBranch: main
      requiredApprovingReviewCount: 0
      protectDefaultBranch: false

  - id: register
    name: Registering the Catalog Info Component
    action: catalog:register
    input:
      repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
      catalogInfoPath: '/catalog-info.yaml'

  output:
    links:
    - title: Open the Source Code Repository
      url: ${{ steps['publish'].output.repoContentsUrl }}
    - title: Open the Catalog Info Component
      icon: catalog
      entityRef: ${{ steps['register'].output.entityRef }}
    - url: ${{steps['create-flux-pr'].output.remoteUrl}}
      title: "Go to PR"
